/*

Copyright (c) 2014, NVIDIA Corporation
All rights reserved.

Redistribution and use in source and binary forms, with or without modification,
are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice, this 
list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright notice, 
this list of conditions and the following disclaimer in the documentation 
and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, 
BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, 
DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE 
OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED 
OF THE POSSIBILITY OF SUCH DAMAGE.

*/

#ifndef __SYNCHRONIC_CONFIG_H
#define __SYNCHRONIC_CONFIG_H

#include <thread>
//the default yield function used inside the implementation is the Standard one
#define __synchronic_yield std::this_thread::yield
#define __synchronic_relax __synchronic_yield

#if defined(_MSC_VER)
    //this is a handy GCC optimization that I use inside the implementation
    #define __builtin_expect(condition,common) condition
    #if _MSC_VER <= 1800
        //using certain keywords that VC++ temporarily doesn't support
        #define _ALLOW_KEYWORD_MACROS
        #define noexcept
        #define constexpr
    #endif
    //yes, I define multiple assignment operators
    #pragma warning(disable:4522)
    //I don't understand how Windows is so bad at timing functions, but is OK with straight-up yield loops
    #define __do_backoff(b) __synchronic_yield()
#else
#define __do_backoff(b) b.sleep_for_step()
#endif

//baseline synchronic behavior
#if !defined(__SYNCHRONIC_PURE_CONDITION) && !defined(__SYNCHRONIC_CONDITION) && !defined(__SYNCHRONIC_BACKOFF) && !defined(__SYNCHRONIC_SPIN)
    #ifdef __APPLE__
        #define __SYNCHRONIC_CONDITION
    #else
        #define __SYNCHRONIC_BACKOFF
    #endif
#endif

//certain platforms have efficient support for spin-waiting built into the operating system
#if defined(__linux__) || defined(__experimental_support_for_MACH_kernel_mode) || (defined(_WIN32_WINNT) && _WIN32_WINNT >= 0x0602)

#if defined(_WIN32_WINNT)

    #include <Windows.h>
    //the combination of WaitOnAddress and WakeByAddressAll is supported on Windows 8.1+
    #define __synchronic_wait(x,v) WaitOnAddress((PVOID)x,(PVOID)&v,sizeof(v),-1)
    #define __synchronic_wait_timed(x,v,t) WaitOnAddress((PVOID)x,(PVOID)&v,sizeof(v),std::chrono::duration_cast<std::chrono::milliseconds>(t).count())
    #define __synchronic_wake_one(x) WakeByAddressSingle((PVOID)x)
    #define __synchronic_wake_all(x) WakeByAddressAll((PVOID)x)
    #define __synchronic_wait_volatile(x,v) WaitOnAddress((PVOID)x,(PVOID)&v,sizeof(v),-1)
    #define __synchronic_wait_timed_volatile(x,v,t) WaitOnAddress((PVOID)x,(PVOID)&v,sizeof(v),std::chrono::duration_cast<std::chrono::milliseconds>(t).count())
    #define __synchronic_wake_one_volatile(x) WakeByAddressSingle((PVOID)x)
    #define __synchronic_wake_all_volatile(x) WakeByAddressAll((PVOID)x)
    #define __SYNCHRONIC_COMPATIBLE(x) (is_pod<x>::value && (sizeof(x) <= 8))

#elif defined(__linux__)

    #include <chrono>
    #include <time.h>
    #include <unistd.h>
    #include <linux/futex.h>
    #include <sys/syscall.h>
    #include <climits>
    #include <cassert>
    template < class Rep, class Period>
    static inline timespec to_timespec(std::chrono::duration<Rep,Period> const& delta) {
      struct timespec ts;
      ts.tv_sec = static_cast<long>(std::chrono::duration_cast<std::chrono::seconds>(delta).count());
      assert(!ts.tv_sec);
      ts.tv_nsec = static_cast<long>(std::chrono::duration_cast<std::chrono::nanoseconds>(delta).count());
      return ts;
    }
    static inline long futex(void const* addr1, int op, int val1) {
        return syscall(SYS_futex, addr1, op, val1, 0, 0, 0);
    }
    static inline long futex(void const* addr1, int op, int val1, struct timespec timeout) {
        return syscall(SYS_futex, addr1, op, val1, &timeout, 0, 0);
    }
    //the combination of SYS_futex(WAIT) and SYS_futex(WAKE) is supported on all recent Linux distributions
    #define __synchronic_wait(x,v) futex(x, FUTEX_WAIT_PRIVATE, v)
    #define __synchronic_wait_timed(x,v,t) futex(x, FUTEX_WAIT_PRIVATE, v, to_timespec(t))
    #define __synchronic_wake_one(x) futex(x, FUTEX_WAKE_PRIVATE, 1)
    #define __synchronic_wake_all(x) futex(x, FUTEX_WAKE_PRIVATE, INT_MAX)
    #define __synchronic_wait_volatile(x,v) futex(x, FUTEX_WAIT, v)
    #define __synchronic_wait_volatile_timed(x,v,t) futex(x, FUTEX_WAIT, v, to_timespec(t))
    #define __synchronic_wake_one_volatile(x) futex(x, FUTEX_WAKE, 1)
    #define __synchronic_wake_all_volatile(x) futex(x, FUTEX_WAKE, INT_MAX)
    #define __SYNCHRONIC_COMPATIBLE(x) (is_integral<x>::value && (sizeof(x) <= 4))

    //the yield function on Linux is better replaced by sched_yield, which is tuned for spin-waiting
    #undef __synchronic_yield
    #define __synchronic_yield sched_yield

    //for extremely short wait times, just let another hyper-thread run
    #undef __synchronic_relax
    #define __synchronic_relax() asm volatile("rep; nop" ::: "memory")

#elif defined(__experimental_support_for_MACH_kernel_mode)

    #include <unistd.h>
    #include <kern/kern_types.h>
    #include <kern/sched_prim.h>

    template <class X, class V>
    void __synchronic_wait(X x, V v) {
        assert_wait((event_t)x, THREAD_INTERRUPTIBLE);
        if(x.load(memory_order_acquire) != v) {
            clear_wait();
            return;
        }
        thread_block(THREAD_CONTINUE_NULL);
    }
    template <class X, class V, class T>
    void __synchronic_wait_timed(X x, V v, T t) {
        static long const tick_per_msec = sysconf(_SC_CLK_TCK)/1000;
        assert_wait((event_t)x, THREAD_INTERRUPTIBLE);
        if(x.load(memory_order_acquire) != v) {
            clear_wait();
            return;
        }
        thread_set_timeout(tick_per_msec/t);
        thread_block(THREAD_CONTINUE_NULL);
    }
    #define __synchronic_wake_one(x) thread_wakeup_one((event_t)x)
    #define __synchronic_wake_all(x) thread_wakeup((event_t)x)
    #define __synchronic_wait_volatile(x,v) __synchronic_dowait(x,v)
    #define __synchronic_wait_timed_volatile(x,v,t) __synchronic_dowait_timed(x,v,t)
    #define __synchronic_wake_one_volatile(x) thread_wakeup_one((event_t)x)
    #define __synchronic_wake_all_volatile(x) thread_wakeup((event_t)x)
    #define __SYNCHRONIC_COMPATIBLE(x) true

#endif
#endif

//this is the number of times we initially spin, on the first wait attempt
#define __SYNCHRONIC_SPIN_COUNT_A 64

//this is how decide to yield instead of just spinning, 'c' is the current trip count
//#define __SYNCHRONIC_SPIN_YIELD(c) true
#define __SYNCHRONIC_SPIN_RELAX(c) (c>>3)

//this is the number of times we normally spin, on every subsequent wait attempt
#define __SYNCHRONIC_SPIN_COUNT_B 16

#define __SYNCHRONIC_SPIN_COUNT_C 512

#endif //__SYNCHRONIC_CONFIG_H
