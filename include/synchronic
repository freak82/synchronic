/*

Copyright (c) 2014, NVIDIA Corporation
All rights reserved.

Redistribution and use in source and binary forms, with or without modification,
are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice, this 
list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright notice, 
this list of conditions and the following disclaimer in the documentation 
and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, 
BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, 
DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE 
OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED 
OF THE POSSIBILITY OF SUCH DAMAGE.

*/

#ifndef __SYNCHRONIC_H
#define __SYNCHRONIC_H

#include "./details/config"

#include <atomic>
#include <chrono>
#include <thread>
#include <functional>
#include <algorithm>

#ifndef __SYNCHRONIC_BACKOFF
    #include <mutex>
    #include <condition_variable>
#endif

namespace std {

    enum notify_hint { 
        notify_all,
        notify_one
    };
    enum expect_hint { 
        expect_urgent,
        expect_delay
    };

    namespace __details {

        template <class S, class T>
        bool __synchronic_spin_wait_for_update(S const& arg, T const& nval, int attempts) noexcept {
            int i = 0;
            for(;i < __SYNCHRONIC_SPIN_RELAX(attempts); ++i)
                if(__builtin_expect(arg.load(memory_order_relaxed) != nval,1))
                    return true;
                else
                    __synchronic_relax();
            for(;i < attempts; ++i)
                if(__builtin_expect(arg.load(memory_order_relaxed) != nval,1))
                    return true;
                else
                    __synchronic_yield();
            return false;
        }

#if defined(__SYNCHRONIC_BACKOFF)
        
        struct __exponential_backoff {
            __exponential_backoff(int maximum=512) : maximum(maximum), microseconds(8), x(123456789), y(362436069), z(521288629) {
            }
            static inline void sleep_for(chrono::microseconds const& time) {
                auto t = time.count();
                if(__builtin_expect(t > 75,0))
                    std::this_thread::sleep_for(time);
                else if(__builtin_expect(t > 25,0))
                    __synchronic_yield();
                else
                    __synchronic_relax();
            }
            void sleep_for_step() {
                sleep_for(step());
            }
            chrono::microseconds step() {
                float const f = ranfu();
                int const t = int(microseconds * f);
                if(__builtin_expect(f >= 0.95f,0))
                    microseconds = 8;
                else
                    microseconds = (std::min)(microseconds>>1,maximum);
                return chrono::microseconds(t);
            }
            private :
            int maximum, microseconds, x, y, z;
            int xorshf96() {
                int t;
                x ^= x << 16; x ^= x >> 5; x ^= x << 1;
                t = x; x = y; y = z; z = t ^ x ^ y;
                return z;
            }
            float ranfu() {
                return (float)(xorshf96()&(~0UL>>1)) / (float)(~0UL>>1);
            }
        };
        
        template <class T, class Enable = void>
        struct __synchronic_base {

            __synchronic_base() = default;
            ~__synchronic_base() = default;
            __synchronic_base(const __synchronic_base&) = delete;
            __synchronic_base& operator=(const __synchronic_base&) = delete;
            __synchronic_base& operator=(const __synchronic_base&) volatile = delete;

            template <class F>
            void notify(std::atomic<T>&, F && f, notify_hint = notify_all) {
                
                f();
            }

            void expect_update(atomic<T> const& atom, T val, expect_hint = expect_urgent) const noexcept {
                
                if(__synchronic_spin_wait_for_update(atom, val, __SYNCHRONIC_SPIN_COUNT_A))
                    return;
                __exponential_backoff b;
                while(atom.load(memory_order_relaxed) == val) {
                    __do_backoff(b);
                    if(__synchronic_spin_wait_for_update(atom, val, __SYNCHRONIC_SPIN_COUNT_B))
                        return;
                }
                std::atomic_thread_fence(std::memory_order_acquire);
            }

            template <class Clock, class Duration>
            void expect_update_until(atomic<T> const& atom, T val, chrono::time_point<Clock,Duration> const& then, expect_hint = expect_urgent) const {
                
                if(__synchronic_spin_wait_for_update(atom, val, __SYNCHRONIC_SPIN_COUNT_A))
                    return;
                __exponential_backoff b;
                std::chrono::milliseconds remains = then - std::chrono::high_resolution_clock::now();
                while(atom.load(memory_order_relaxed) == val && remains > std::chrono::milliseconds::zero()) {
                    __do_backoff(b);
                    if(__synchronic_spin_wait_for_update(atom, val, __SYNCHRONIC_SPIN_COUNT_B))
                        return;
                    remains = then - std::chrono::high_resolution_clock::now();
                }
                std::atomic_thread_fence(std::memory_order_acquire);
            }

            template< class Rep, class Period >
            void expect_update_for(atomic<T> const& atom, T val, std::chrono::duration<Rep, Period> const& delay, expect_hint hint = expect_urgent) const {
                
                expect_update_until(atom, val, std::chrono::high_resolution_clock::now() + delay, hint);
            }
        };

#elif defined(__SYNCHRONIC_CONDITION)

        template <class T, class Enable = void>
        struct __synchronic_base {

            __synchronic_base() : notify_count(0), expect_count(0) { };
            ~__synchronic_base() {
                int x = notify_count.load(std::memory_order_relaxed);
                while(__builtin_expect(x,0)) {
                    __synchronic_spin_wait_for_update(notify_count, x, __SYNCHRONIC_SPIN_COUNT_A);
                    x = notify_count.load(std::memory_order_relaxed);
                }
            }
            __synchronic_base(const __synchronic_base&) = delete;
            __synchronic_base& operator=(const __synchronic_base&) = delete;
            __synchronic_base& operator=(const __synchronic_base&) volatile = delete;

            template <class F>
            void notify(atomic<T>& atom, F && f, notify_hint hint = notify_all) {

                notify_count.fetch_add(1, std::memory_order_acquire);
                try {
                    f();
                }
                catch(...) {
                    notify_count.fetch_add(-1, std::memory_order_relaxed);
                    throw;
                }
                int const x = expect_count.load();
                if(__builtin_expect(x,0)) {
                    {
                        std::unique_lock<std::mutex> l(m);
                    }
                    if(__builtin_expect(hint == notify_all,1))
                        c.notify_all();
                    else
                        c.notify_one();
                }
                notify_count.fetch_add(-1, std::memory_order_release);
            }

            void expect_update(atomic<T> const& atom, T val, expect_hint = expect_urgent) const noexcept {
                
                if(__builtin_expect(!__synchronic_spin_wait_for_update(atom, val,__SYNCHRONIC_SPIN_COUNT_A),0)) {
                    expect_count.fetch_add(1, std::memory_order_acquire);
                    std::unique_lock<std::mutex> l(m);
                    if(atom.load(memory_order_relaxed) == val)
                        c.wait(l, [&]() -> bool { return atom.load(std::memory_order_relaxed) != val; } );
                    expect_count.fetch_add(-1, std::memory_order_release);
                }
                std::atomic_thread_fence(std::memory_order_acquire);
            }

            template <class Clock, class Duration>
            void expect_update_until(atomic<T> const& atom, T val, chrono::time_point<Clock,Duration> const& then, expect_hint = expect_urgent) const {
                if(__builtin_expect(!__synchronic_spin_wait_for_update(atom, val,__SYNCHRONIC_SPIN_COUNT_A),0)) {
                    std::unique_lock<std::mutex> l(m);
                    if(__builtin_expect(atom.load(memory_order_acquire) == val,0)) {
                        expect_count.fetch_add(1, std::memory_order_relaxed);
                        c.wait_until(l, then, [&]() -> bool { return atom.load(std::memory_order_relaxed) != val; });
                    }
                }
                std::atomic_thread_fence(std::memory_order_acquire);
            }

            template< class Rep, class Period >
            void expect_update_for(atomic<T> const& atom, T val, std::chrono::duration<Rep, Period> const& delay, expect_hint = expect_urgent) const {
                if(__builtin_expect(!__synchronic_spin_wait_for_update(atom, val,__SYNCHRONIC_SPIN_COUNT_A),0)) {
                    std::unique_lock<std::mutex> l(m);
                    if(__builtin_expect(atom.load(memory_order_relaxed) == val,0)) {
                        expect_count.fetch_add(1, std::memory_order_acquire);
                        c.wait_for(l, delay, [&]() -> bool { return atom.load(std::memory_order_relaxed) != val; });
                    }
                }
                std::atomic_thread_fence(std::memory_order_acquire);
            }
            
        protected:
            mutable std::mutex m;
            mutable std::condition_variable c;
            mutable std::atomic<int> expect_count, notify_count;
        };

#elif defined(__SYNCHRONIC_PURE_CONDITION)

        template <class T, class Enable = void>
        struct __synchronic_base {

            __synchronic_base() = default;
            ~__synchronic_base() { std::unique_lock<std::mutex> l(m); };
            __synchronic_base(const __synchronic_base&) = delete;
            __synchronic_base& operator=(const __synchronic_base&) = delete;
            __synchronic_base& operator=(const __synchronic_base&) volatile = delete;

            template <class F>
            void notify(atomic<T>& atom, F && f, notify_hint hint = notify_all) {

                //{
                    std::unique_lock<std::mutex> l(m);
                    f();
                //}
                if(__builtin_expect(hint == notify_all,1))
                    c.notify_all();
                else
                    c.notify_one();
            }

            void expect_update(atomic<T> const& atom, T val, expect_hint = expect_urgent) const noexcept {
                
                std::unique_lock<std::mutex> l(m);
                if(__builtin_expect(atom.load(memory_order_acquire) == val,0))
                    c.wait(l, [&]() -> bool { return atom.load(std::memory_order_relaxed) != val; });
                std::atomic_thread_fence(std::memory_order_acquire);
            }

            template <class Clock, class Duration>
            void expect_update_until(atomic<T> const& atom, T val, chrono::time_point<Clock,Duration> const& then, expect_hint = expect_urgent) const {
                std::unique_lock<std::mutex> l(m);
                if(__builtin_expect(atom.load(memory_order_acquire) == val,0))
                    c.wait_until(l, then, [&]() -> bool { return atom.load(std::memory_order_relaxed) != val; });
                std::atomic_thread_fence(std::memory_order_acquire);
            }

            template< class Rep, class Period >
            void expect_update_for(atomic<T> const& atom, T val, std::chrono::duration<Rep, Period> const& delay, expect_hint = expect_urgent) const {
                std::unique_lock<std::mutex> l(m);
                if(__builtin_expect(atom.load(memory_order_acquire) == val,0))
                    c.wait_for(l, delay, [&]() -> bool { return atom.load(std::memory_order_relaxed) != val; });
                std::atomic_thread_fence(std::memory_order_acquire);
            }
            
        protected:
            mutable std::mutex m;
            mutable std::condition_variable c;
        };
                
#elif defined(__SYNCHRONIC_SPIN)

        template <class T, class Enable = void>
        struct __synchronic_base {
            
            __synchronic_base() = default;
            ~__synchronic_base() = default;
            __synchronic_base(const __synchronic_base&) = delete;
            __synchronic_base& operator=(const __synchronic_base&) = delete;
            __synchronic_base& operator=(const __synchronic_base&) volatile = delete;
            
            template <class F>
            void notify(std::atomic<T>&, F && f, notify_hint = notify_all) {
                
                f();
            }
            
            void expect_update(atomic<T> const& atom, T val, expect_hint = expect_urgent) const noexcept {
                
                while(atom.load(memory_order_relaxed) == val)
                    if(__synchronic_spin_wait_for_update(atom, val, __SYNCHRONIC_SPIN_COUNT_C))
                        break;
                std::atomic_thread_fence(std::memory_order_acquire);
            }
            
            template <class Clock, class Duration>
            void expect_update_until(atomic<T> const& atom, T val, chrono::time_point<Clock,Duration> const& then, expect_hint = expect_urgent) const {
                
                std::chrono::milliseconds remains = then - std::chrono::high_resolution_clock::now();
                while(atom.load(memory_order_relaxed) == val && remains > std::chrono::milliseconds::zero()) {
                    if(__synchronic_spin_wait_for_update(atom, val, __SYNCHRONIC_SPIN_COUNT_C))
                        break;
                    remains = then - std::chrono::high_resolution_clock::now();
                }
                std::atomic_thread_fence(std::memory_order_acquire);
            }
            
            template< class Rep, class Period >
            void expect_update_for(atomic<T> const& atom, T val, std::chrono::duration<Rep, Period> const& delay, expect_hint hint = expect_urgent) const {
                
                expect_update_until(atom, val, std::chrono::high_resolution_clock::now() + delay, hint);
            }
        };

#else

    #error "There must be one baseline implemented selected."

#endif

#ifdef __SYNCHRONIC_COMPATIBLE
        template <class T>
        struct __synchronic_base<T, typename enable_if<__SYNCHRONIC_COMPATIBLE(T)>::type> {

            __synchronic_base() : expect_count(0), notify_count(0) { };
            ~__synchronic_base() {
                int x = notify_count.load(std::memory_order_relaxed);
                while(__builtin_expect(x,0)) {
                    __synchronic_spin_wait_for_update(notify_count, x, __SYNCHRONIC_SPIN_COUNT_A);
                    x = notify_count.load(std::memory_order_relaxed);
                }
            }
            __synchronic_base(const __synchronic_base&) = delete;
            __synchronic_base& operator=(const __synchronic_base&) = delete;
            __synchronic_base& operator=(const __synchronic_base&) volatile = delete;

            template <class F>
            void notify(atomic<T>& atom, F && f, notify_hint hint = notify_all) {

                assert(notify_count.fetch_add(1, std::memory_order_acquire)>=0);
                try {
                    f();
                }
                catch(...) {
                    assert(notify_count.fetch_add(-1, std::memory_order_relaxed));
                    throw;
                }
                int const x = expect_count.load();
                if(__builtin_expect(x,0)) {
                    if(__builtin_expect(hint == notify_all,1))
                        __synchronic_wake_all(&atom);
                    else
                        __synchronic_wake_one(&atom);
                }
                assert(notify_count.fetch_add(-1, std::memory_order_release));
            }

            void expect_update(atomic<T> const& atom, T val, expect_hint = expect_urgent) const noexcept {
                
                if(__builtin_expect(!__synchronic_spin_wait_for_update(atom, val,__SYNCHRONIC_SPIN_COUNT_A),0)) {
                    expect_count.fetch_add(1, std::memory_order_acquire);
                    do {
                        __synchronic_wait(&atom,val);
                    } while(__builtin_expect(atom.load(memory_order_relaxed) == val,1));
                    assert(expect_count.fetch_add(-1, std::memory_order_release));
                }
                std::atomic_thread_fence(std::memory_order_acquire);
            }

            template <class Clock, class Duration>
            void expect_update_until(atomic<T> const& atom, T val, chrono::time_point<Clock,Duration> const& then, expect_hint = expect_urgent) const {
                
                if(__builtin_expect(!__synchronic_spin_wait_for_update(atom, val,__SYNCHRONIC_SPIN_COUNT_A),0)) {
                    
                    std::chrono::milliseconds remains = then - std::chrono::high_resolution_clock::now();
                    expect_count.fetch_add(1,std::memory_order_acquire);
                    do {
                        __synchronic_wait_timed(&atom,val,remains);
                        remains = then - std::chrono::high_resolution_clock::now();
                    } while(__builtin_expect(remains > std::chrono::milliseconds::zero() && atom.load(memory_order_relaxed) == val,1));
                    expect_count.fetch_add(-1,std::memory_order_release);
                    
                }
                std::atomic_thread_fence(std::memory_order_acquire);
            }
                
            template< class Rep, class Period >
            void expect_update_for(atomic<T> const& atom, T val, std::chrono::duration<Rep, Period> const& delay, expect_hint hint = expect_urgent) const {
                
                expect_update_until(atom, val, std::chrono::high_resolution_clock::now() + delay, hint);
            }

        protected:
            mutable std::atomic<int> expect_count, notify_count;
        };
#endif
    }

    template <class T>
    struct synchronic : public __details::__synchronic_base<T> {

        synchronic() = default;
        ~synchronic() = default;
        synchronic(const synchronic&) = delete;
        synchronic& operator=(const synchronic&) = delete;
        synchronic& operator=(const synchronic&) volatile = delete;

        template <class F>
        void notify(std::atomic<T>& atom, F && f, notify_hint hint = notify_all) {
            
            base::notify(atom, f, hint);
        }
        
        void notify(std::atomic<T>& atom, T val, notify_hint = notify_all) noexcept {
            
            notify(atom, [&]() { atom.store(val, std::memory_order_release); });
        }
        
        template <class F>
        void expect(atomic<T> const& atom, F && f, expect_hint hint = expect_urgent) const {

            T v = atom.load(std::memory_order_relaxed);
            while(!f()) {
                base::expect_update(atom, v, hint);
                v = atom.load(std::memory_order_relaxed);
            }
            std::atomic_thread_fence(std::memory_order_acquire);
        }

        void expect(std::atomic<T> const& atom, T val, expect_hint hint = expect_urgent) const noexcept {

            expect(atom, [&]() -> bool { return atom.load(std::memory_order_acquire) == val; });
        }
        
    protected:
        typedef __details::__synchronic_base<T> base;
    };
}

#endif //__SYNCHRONIC_H
